# -*- coding: utf-8 -*-
"""Information Retrieval from PDF Documents.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11kEbr5y7jkYX-GIq35LUAkuN9osjMVL1

# Information Retrieval from PDF Documents

**PyPDF2 to read and extract text from the PDF**
"""

!pip install PyPDF2

"""# Classes and Their Responsibilities
**PDFProcessor Class**

 *Handles PDF file validation and text extraction.
Encapsulates the logic for interacting with the PDF file.
Attributes:*



```

pdf_path (str): # Path to the PDF file.
text (str):  # Extracted text from the PDF.
```



**Methods:**



```
validate_pdf(): # Checks if the file exists and is a valid PDF.
extract_text(): # Reads the PDF and extracts text from its pages.
```



**KeywordSearcher Class**

 ***Handles keyword searching within the extracted text.
Encapsulates the logic for splitting text into sentences and finding matches.
Attributes:***



```
text (str): # Extracted text to search within.
keywords (list): # List of keywords to search for.
```


**Methods:**

`search(): # Splits text into sentences and finds sentences containing the keywords.`

**PDFKeywordSearchApp Class**

Orchestrates the overall workflow of the program.
Provides the user interface for file input and keyword searching.
Methods: *italicized text*

`run(): Main method that drives the program execution.`

# Step 1: Import Libraries
"""

import PyPDF2
import re
import os

"""# Step 2: Define the PDFProcessor Class

"""

class PDFProcessor:
    def __init__(self, pdf_path):
        """Initialize with the path to the PDF file."""
        self.pdf_path = pdf_path
        self.text = ""  # Placeholder for extracted text

    def validate_pdf(self):
        """Check if the file exists and is a valid PDF."""
        if not os.path.isfile(self.pdf_path):
            raise FileNotFoundError("File not found. Please ensure the path is correct.")
        if not self.pdf_path.lower().endswith('.pdf'):
            raise ValueError("The selected file is not a PDF.")

    def extract_text(self):
        """Extract text from the PDF file."""
        with open(self.pdf_path, 'rb') as file:
            reader = PyPDF2.PdfReader(file)
            for page in reader.pages:
                self.text += page.extract_text() + "\n"

"""# Step 3: Define the KeywordSearcher Class"""

class KeywordSearcher:
    def __init__(self, text, keywords):
        self.text = text
        self.keywords = keywords

    def search(self):
        """Search for keywords in text and return matching sentences."""
        results = {}
        # Simplified sentence splitting
        sentences = re.split(r'(?<=[.!?])\s+', self.text)
        for keyword in self.keywords:
            results[keyword] = [sentence for sentence in sentences if keyword.lower() in sentence.lower()]
        return results

"""# Step 4: Define the PDFKeywordSearchApp Class"""

class PDFKeywordSearchApp:
    def run(self):
        try:
            pdf_path = input("Enter the full path to your PDF file: ")
            processor = PDFProcessor(pdf_path)
            processor.validate_pdf()
            processor.extract_text()

            keywords = input("Enter keywords to search (comma-separated): ").split(',')
            searcher = KeywordSearcher(processor.text, keywords)
            results = searcher.search()

            print("\nSearch Results:")
            for keyword, sentences in results.items():
                print(f"\nKeyword: {keyword.strip()}\n")
                for sentence in sentences:
                    print(f"- {sentence.strip()}")
        except (FileNotFoundError, ValueError) as e:
            print(f"Error: {e}")

"""# Step 5: Add the Entry Point"""

if __name__ == "__main__":
    app = PDFKeywordSearchApp()
    app.run()